{"version":3,"sources":["webpack:///src/app/global/module/declarations.ts","webpack:///src/app/survey/question/confirm-buttons/confirm-buttons.component.css","webpack:///src/app/survey/instances/instances-dummy/instances-dummy.component.css","webpack:///src/app/survey/question/question-choice-slider/question-choice-slider.component.css","webpack:///src/app/survey/question/question.service.ts","webpack:///src/app/survey/question/question.component.css","webpack:///src/app/survey/question-container/question-container.component.ts","webpack:///src/app/survey/question/question-choice/question-choice.component.css","webpack:///src/app/home/home.component.ts","webpack:///src/app/app.component.css","webpack:///src/environments/environment.ts","webpack:///src/app/auth/auth.interceptor.ts","webpack:///src/app/survey/question/question-dummy/question-dummy.component.ts","webpack:///src/app/survey/question/question-array/question-array.component.html","webpack:///src/app/survey/survey.service.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/survey/question/question-input/question-input.component.html","webpack:///src/app/survey/instances/instance/instance.component.ts","webpack:///src/app/survey/question/question.component.ts","webpack:///src/app/survey/instances/instances-dummy/instances-dummy.component.html","webpack:///src/app/utility/utility.service.ts","webpack:///src/app/survey/question/question-input/question-input.component.ts","webpack:///src/app/survey/question/question-choice-slider/question-choice-slider.component.html","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/survey/question/question-choice/question-choice.component.html","webpack:///src/app/survey/question-container/question-container.component.html","webpack:///src/app/survey/question/question-input/question-input.model.ts","webpack:///src/app/app.routes.ts","webpack:///src/app/home/home.component.css","webpack:///src/app/survey/question/question.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/survey/question/question-choice-slider/question-choice-slider.component.ts","webpack:///src/app/survey/instances/instance/instance.component.html","webpack:///src/app/survey/instance.model.ts","webpack:///src/app/survey/question/confirm-buttons/confirm-buttons.component.ts","webpack:///src/app/survey/instances/instances.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/global/module/providers.ts","webpack:///src/app/survey/question/confirm-buttons/confirm-buttons.component.html","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/token-storage.service.ts","webpack:///src/app/survey/question/question-array/question-array.component.ts","webpack:///src/app/material/material.module.ts","webpack:///src/app/global/global.interceptor.ts","webpack:///src/app/survey/instances/instances-dummy/instances-dummy.component.ts","webpack:///src/app/survey/question/question-dummy/question-dummy.component.css","webpack:///src/app/survey/question/question-choice/question-choice.component.ts","webpack:///src/app/survey/question/question-array/question-array.model.ts","webpack:///src/app/utility/icon.service.ts","webpack:///src/app/survey/instances/today-instance/today-instance.component.html","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/survey/question/question-dummy/question-dummy.component.html","webpack:///src/app/survey/instances/instance/instance.component.css","webpack:///src/app/survey/instances/instances.component.html","webpack:///src/app/survey/instances/today-instance/today-instance.component.css","webpack:///src/app/survey/question/question-choice/question-choice.model.ts","webpack:///src/app/auth/login/login.guard.ts","webpack:///src/app/survey/instances/today-instance/today-instance.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/auth/login/login.component.css","webpack:///src/app/survey/question/question-input/question-input.component.css","webpack:///src/app/survey/question/question-array/question-array.component.css","webpack:///src/app/survey/instances/instances.component.css","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/auth/login/login.component.html"],"names":["declarations","QuestionService","providedIn","QuestionContainerComponent","surveyService","router","route","subscription","paramMap","pipe","params","get","instanceId","getSurvey","survey","_id","firstQuestionId","navigate","relativeTo","subscribe","unsubscribe","selector","template","HomeComponent","authService","title","login","userId","error","console","token","readToken","log","environment","production","AuthInterceptor","tokenStorageService","req","next","accessToken","requestWithAccessToken","clone","headers","set","handle","QuestionDummyComponent","questionService","nextQuestion","prevQuestion","questionData","isTypeChoice","isTypeArray","isTypeInput","hasNextQuestion","value","hasPrevQuestion","_answer","changeStartValue","questionType","type","questionLabel","data","label","event","emit","answer","startValue","SurveyService","http","prefix","instancePrefix","questions","map","q","formatQuestion","questionId","post","refreshSurvey","find","question","index","findIndex","instances","i","instance","InstanceComponent","day","month","year","_instance","date","split","link","QuestionComponent","instanceId$","questionId$","instanceIdAndQuestionId$","question$","getQuestion","answer$","getAnswer","nextQuestionId$","getNextQuestionId","prevQuestionId$","getPrevQuestionId","hasNextQuestion$","id","hasPrevQuestion$","answerQuestion","navigateToQuestion","UtilityService","QuestionInputComponent","fb","_startValue","formGroup","group","control","minLength","maxLength","initFormValue","formValid","validateForm","valueControl","valid","required","AuthGuard","state","isValidToken","validToken","parseUrl","QuestionInputModel","routes","path","component","canActivate","children","redirectTo","pathMatch","AppComponent","utilityService","initNotifications","scheduleSurveyNotifications","QuestionChoiceSliderComponent","fg","slider","minNumber","_options","sliderControl","setValue","precompilateForm","options","length","output","formatOutput","InstanceModel","surveyId","Date","ConfirmButtonsComponent","prev","InstancesComponent","instances$","getInstances","AppModule","imports","providers","bootstrap","provide","useClass","multi","LoginComponent","iconService","form","username","password","wrongLogin","loading","_passwordVisible","iconPassword","iconEye","iconEyeSlash","eye","eyeSlash","passwordVisible","dismissSoftKeyBoard","invalid","markAsDirty","err","pristine","reset","TokenStorageService","localStorage","setItem","getItem","JSON","parse","atob","QuestionArrayComponent","checkBoxesControl","array","_maxNumberOfChoices","singleChoice","_optionsAndSubQuestions","subQuestions","initValues","initRow","j","initFormGroup","optionsAndSubQuestions","values","controls","subQuestion","c","getControlsFromSubQuestion","validForm","countTrueValues","v","minNumberOfChoices","maxNumberOfChoices","reduce","prevValid","currValid","acc","val","row","nextValue","forEach","rowIndex","truePos","MaterialComponents","MaterialModule","exports","GlobalInterceptor","request","method","InstancesDummyComponent","QuestionChoiceComponent","disableCheckBoxes","_numberOfTrueValues","errorMessage","initValue","numberOfTrueValues","pos","QuestionArrayModel","IconService","className","code","formatCode","String","fromCharCode","AuthService","res","saveToken","tokenJSON","decodeToken","expireDate","exp","now","QuestionChoiceModel","hasOtherOption","LoginGuard","TodayInstanceComponent","todayInstanceSubscription","getTodayInstance","AppRoutingModule","forRoot","bootstrapModule","webpackEmptyAsyncContext","Promise","resolve","then","e","Error","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import {AppComponent} from '@src/app/app.component';\nimport {HomeComponent} from '@src/app/home/home.component';\nimport {QuestionComponent} from '@src/app/survey/question/question.component';\nimport {QuestionChoiceComponent} from '@src/app/survey/question/question-choice/question-choice.component';\nimport {QuestionArrayComponent} from '@src/app/survey/question/question-array/question-array.component';\nimport {QuestionInputComponent} from '@src/app/survey/question/question-input/question-input.component';\nimport {ConfirmButtonsComponent} from '@src/app/survey/question/confirm-buttons/confirm-buttons.component';\nimport {QuestionDummyComponent} from '@src/app/survey/question/question-dummy/question-dummy.component';\nimport {InstancesComponent} from '@src/app/survey/instances/instances.component';\nimport {InstancesDummyComponent} from '@src/app/survey/instances/instances-dummy/instances-dummy.component';\nimport {InstanceComponent} from '@src/app/survey/instances/instance/instance.component';\nimport {LoginComponent} from '@src/app/auth/login/login.component';\nimport {QuestionContainerComponent} from '@src/app/survey/question-container/question-container.component';\nimport {QuestionChoiceSliderComponent} from '@src/app/survey/question/question-choice-slider/question-choice-slider.component';\nimport {TodayInstanceComponent} from '@src/app/survey/instances/today-instance/today-instance.component';\n\nexport const declarations = [\n  AppComponent,\n  HomeComponent,\n  LoginComponent,\n  InstancesComponent,\n  InstancesDummyComponent,\n  InstanceComponent,\n  TodayInstanceComponent,\n  QuestionContainerComponent,\n  QuestionComponent,\n  QuestionDummyComponent,\n  QuestionChoiceComponent,\n  QuestionChoiceSliderComponent,\n  QuestionArrayComponent,\n  QuestionInputComponent,\n  ConfirmButtonsComponent,\n];\n","export default \".root {\\n  display: flex;\\n  justify-content: space-around;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpcm0tYnV0dG9ucy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLDZCQUE2QjtBQUMvQiIsImZpbGUiOiJjb25maXJtLWJ1dHRvbnMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5yb290IHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG59XG4iXX0= */\";","export default \".container {\\n  display: grid;\\n  grid-template-columns: repeat(7, 1fr);\\n  grid-column-gap: 30px;\\n  padding: 50px 80px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbmNlcy1kdW1teS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLHFDQUFxQztFQUNyQyxxQkFBcUI7RUFDckIsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6Imluc3RhbmNlcy1kdW1teS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDcsIDFmcik7XG4gIGdyaWQtY29sdW1uLWdhcDogMzBweDtcbiAgcGFkZGluZzogNTBweCA4MHB4O1xufVxuIl19 */\";","export default \"mat-slider {\\n  width: 100%;\\n  margin-top: 50px;\\n}\\n\\n.value-label {\\n  margin-top: 10px;\\n  margin-bottom: 30px;\\n  font-size: 20px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXN0aW9uLWNob2ljZS1zbGlkZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7RUFDWCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGVBQWU7QUFDakIiLCJmaWxlIjoicXVlc3Rpb24tY2hvaWNlLXNsaWRlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LXNsaWRlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW4tdG9wOiA1MHB4O1xufVxuXG4udmFsdWUtbGFiZWwge1xuICBtYXJnaW4tdG9wOiAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICBmb250LXNpemU6IDIwcHg7XG59XG4iXX0= */\";","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  hasNextQuestion: boolean;\n  hasPrevQuestion: boolean;\n\n  constructor() {}\n}\n","export default \".root {\\n  background-color: #f8f8f8;\\n  height: 100vh;\\n  width: 100vw;\\n\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.question-container {\\n  min-width: 300px;\\n  padding: 30px 40px;\\n}\\n\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXN0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx5QkFBeUI7RUFDekIsYUFBYTtFQUNiLFlBQVk7O0VBRVosYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6InF1ZXN0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucm9vdCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY4Zjg7XG4gIGhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDB2dztcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLnF1ZXN0aW9uLWNvbnRhaW5lciB7XG4gIG1pbi13aWR0aDogMzAwcHg7XG4gIHBhZGRpbmc6IDMwcHggNDBweDtcbn1cblxuIl19 */\";","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {SurveyService} from '@src/app/survey/survey.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {map, switchMap} from 'rxjs/operators';\nimport {Observable, of, Subscription} from 'rxjs';\n\n@Component({\n  selector: 'app-question-container',\n  templateUrl: './question-container.component.html',\n})\nexport class QuestionContainerComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    private surveyService: SurveyService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.paramMap.pipe(\n      // instance id\n      map(params => params.get('instanceId')),\n      // survey\n      switchMap((instanceId: string) => this.surveyService.getSurvey(instanceId)),\n      // first question id\n      map(survey => survey?.[0]?._id ?? null),\n      // navigate to first id\n      switchMap((firstQuestionId: string | null) => {\n        if (!firstQuestionId) {\n          return of(null);\n        }\n\n        return this.router.navigate(\n          ['question', firstQuestionId],\n          {relativeTo: this.route}\n        );\n      })\n    ).subscribe();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","export default \"ul {\\n  list-style-type: none;\\n  -webkit-padding-start: 0;\\n          padding-inline-start: 0;\\n  margin-top: 30px;\\n  margin-bottom: 20px;\\n}\\n\\nli {\\n  margin-top: 15px;\\n  display: flex;\\n}\\n\\n.checkbox-label {\\n  margin-left: 10px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXN0aW9uLWNob2ljZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UscUJBQXFCO0VBQ3JCLHdCQUF1QjtVQUF2Qix1QkFBdUI7RUFDdkIsZ0JBQWdCO0VBQ2hCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkIiLCJmaWxlIjoicXVlc3Rpb24tY2hvaWNlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ1bCB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgcGFkZGluZy1pbmxpbmUtc3RhcnQ6IDA7XG4gIG1hcmdpbi10b3A6IDMwcHg7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG5cbmxpIHtcbiAgbWFyZ2luLXRvcDogMTVweDtcbiAgZGlzcGxheTogZmxleDtcbn1cblxuLmNoZWNrYm94LWxhYmVsIHtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG59XG4iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '@src/app/auth/auth.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit {\n  title = 'thesis-client';\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n  ) { }\n\n  ngOnInit() {\n  }\n\n  login1() {\n    this.login('002');\n  }\n\n  login2() {\n    this.login('003');\n  }\n\n  login(userId: string) {\n    this.authService.login(userId, '12345678')\n      .subscribe(\n        () => {},\n        error => console.error(error)\n      );\n\n    // this.authService.tryToken();\n  }\n\n  readToken() {\n    const token = this.authService.readToken();\n    console.log(token);\n  }\n\n  get() {\n    this.authService.get();\n  }\n\n  goToQuestion() {\n    this.router.navigate(['instance', 2, 'question', 1])\n      .catch();\n  }\n\n  goToInstances() {\n    this.router.navigate(['instance'])\n      .catch();\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LmNzcyJ9 */\";","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {TokenStorageService} from '@src/app/auth/token-storage.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n    constructor(private tokenStorageService: TokenStorageService) {}\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // getting access token\n        const accessToken = this.tokenStorageService.readToken();\n\n        // adding authorization header\n        const requestWithAccessToken = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${accessToken}`)\n        });\n\n        return next.handle(requestWithAccessToken);\n    }\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {QuestionChoiceModel} from '@src/app/survey/question/question-choice/question-choice.model';\nimport {QuestionArrayModel} from '@src/app/survey/question/question-array/question-array.model';\nimport {QuestionInputModel} from '@src/app/survey/question/question-input/question-input.model';\nimport {QuestionService} from '@src/app/survey/question/question.service';\n\n@Component({\n  selector: 'app-question-dummy',\n  templateUrl: './question-dummy.component.html',\n  styleUrls: ['./question-dummy.component.css']\n}) export class QuestionDummyComponent {\n  @Output() nextQuestion = new EventEmitter();\n  @Output() prevQuestion = new EventEmitter();\n\n  @Input() set hasNextQuestion(value: boolean) {\n    this.questionService.hasNextQuestion = value;\n  }\n\n  get hasNextQuestion() {\n    return this.questionService.hasNextQuestion;\n  }\n\n  @Input() set hasPrevQuestion(value: boolean) {\n    this.questionService.hasPrevQuestion = value;\n  }\n\n  get hasPrevQuestion() {\n    return this.questionService.hasPrevQuestion;\n  }\n\n  private _answer;\n  @Input() set answer(value) {\n    this._answer = value;\n    this.changeStartValue();\n  }\n\n  get answer() {\n    return this._answer;\n  }\n\n  @Input() set question (value: any) {\n    if (!value) {\n      return;\n    }\n\n    // extract data from question\n\n    this.questionType = value.type;\n    this.questionLabel = value.data.label;\n\n    this.isTypeChoice = this.questionType === 'choice';\n    this.isTypeArray = this.questionType === 'array';\n    this.isTypeInput = this.questionType === 'input';\n\n    this.questionData = this.isTypeChoice ? new QuestionChoiceModel(value.data)\n        : this.isTypeArray ? new QuestionArrayModel(value.data)\n        : this.isTypeInput ? new QuestionInputModel(value.data) : {};\n\n\n    this.changeStartValue();\n  }\n\n  questionType: string;\n  questionLabel: string;\n  questionData: QuestionChoiceModel | QuestionArrayModel | QuestionInputModel | any = {};\n  isTypeChoice = false;\n  isTypeArray = false;\n  isTypeInput = false;\n  startValue;\n\n  constructor(\n    private questionService: QuestionService\n  ) {}\n\n  onNextQuestion(event) {\n    this.nextQuestion.emit(event);\n  }\n\n  onPrevQuestion() {\n    this.prevQuestion.emit();\n  }\n\n  changeStartValue() {\n    if (!this.answer || this.answer.questionType !== this.questionType) {\n      this.startValue = null;\n      return;\n    }\n\n    this.startValue = this.answer.data;\n  }\n}\n","export default \"<div>\\n  Question array\\n  <table>\\n    <tr>\\n      <th></th>\\n      <th *ngFor=\\\"let option of options\\\">\\n        {{option.label}}\\n      </th>\\n    </tr>\\n    <tr *ngFor=\\\"let subQuestion of checkBoxesControl.controls; let rowIndex=index\\\">\\n      <td>\\n        {{getSubQuestion(rowIndex)}}\\n      </td>\\n      <td *ngFor=\\\"let control of getControlsFromSubQuestion(subQuestion); let i=index\\\">\\n        <div class=\\\"checkbox-container\\\">\\n          <mat-checkbox\\n            class=\\\"checkbox\\\"\\n            [checked]=\\\"control.value\\\"\\n            (change)=\\\"toggleCheckbox($event.checked, control, subQuestion)\\\"\\n          ></mat-checkbox>\\n        </div>\\n      </td>\\n    </tr>\\n  </table>\\n  <app-confirm-buttons\\n    (next)=\\\"onNextQuestion()\\\"\\n    (prev)=\\\"onPrevQuestion()\\\"\\n  ></app-confirm-buttons>\\n</div>\\n\";","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {map, tap} from 'rxjs/operators';\nimport {QuestionChoiceModel} from '@src/app/survey/question/question-choice/question-choice.model';\nimport {QuestionArrayModel} from '@src/app/survey/question/question-array/question-array.model';\nimport {QuestionInputModel} from '@src/app/survey/question/question-input/question-input.model';\nimport {Observable, of} from 'rxjs';\nimport {InstanceModel} from '@src/app/survey/instance.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SurveyService {\n  prefix = 'api/survey';\n  instancePrefix = 'api/instance';\n  instanceId = null;\n  survey = null;\n\n  constructor(private http: HttpClient) {}\n\n  getQuestionsFromInstanceId(instanceId= '2') {\n    return this.http.get(\n      `${this.instancePrefix}/${instanceId}/question`\n    ).pipe(\n      map((questions: any[]) => questions.map(q => this.formatQuestion(q))),\n    );\n\n  }\n\n  answerQuestion(instanceId, questionId, value) {\n    return this.http.post(`${this.instancePrefix}/${instanceId}/question/${questionId}/answer`, {value});\n  }\n\n  getAnswer(instanceId, questionId) {\n    return this.http.get(`${this.instancePrefix}/${instanceId}/question/${questionId}/answer/`);\n  }\n\n  private refreshSurvey(instanceId) {\n    return this.http.get(`${this.instancePrefix}/${instanceId}/question`).pipe(\n      tap(survey => {\n        this.instanceId = instanceId;\n        this.survey = survey;\n      }),\n    );\n  }\n\n  getSurvey(instanceId: string): Observable<any> {\n    if (instanceId !== this.instanceId || this.survey === null) {\n      this.instanceId = null;\n      return this.refreshSurvey(instanceId);\n    }\n    return of(this.survey);\n  }\n\n  getQuestion(instanceId, questionId) {\n    return this.getSurvey(instanceId).pipe(\n      map(questions => questions.find(question => question._id === questionId)),\n    );\n  }\n\n  getNextQuestionId(instanceId, questionId): Observable<number | null> {\n    return this.getSurvey(instanceId).pipe(\n      map(questions => {\n        const index = questions.findIndex(question => question._id === questionId);\n        return questions[index + 1]?._id ?? null;\n      })\n    );\n  }\n\n  getPrevQuestionId(instanceId, questionId): Observable<number | null> {\n    return this.getSurvey(instanceId).pipe(\n      map(questions => {\n        const index = questions.findIndex(question => question._id === questionId);\n        return questions[index - 1]?._id ?? null;\n      })\n    );\n  }\n\n  getInstances() {\n    return this.http.get<any>(this.instancePrefix).pipe(\n      map(instances => instances.map(i => new InstanceModel(i)))\n    );\n  }\n\n  getTodayInstance(): Observable<InstanceModel> {\n    return this.http.post<any>(`${this.instancePrefix}/today-instance`, {}).pipe(\n      map(instance => new InstanceModel(instance))\n    );\n  }\n\n  private formatQuestion(question) {\n    const questionData = question.type === 'choice' ? new QuestionChoiceModel(question.data) :\n      question.type === 'array' ? new QuestionArrayModel(question.data) :\n      question.type === 'input' ? new QuestionInputModel(question.data) : null;\n\n    return {\n      _id: question._id,\n      type: question.type,\n      data: questionData,\n    };\n  }\n}\n","export default \"<button (click)=\\\"login1()\\\">\\n  LOGIN 1\\n</button>\\n<br />\\n<button (click)=\\\"login2()\\\">\\n  LOGIN 2\\n</button>\\n<br />\\n<button (click)=\\\"readToken()\\\">\\n  READ TOKEN\\n</button>\\n<br />\\n<button (click)=\\\"goToQuestion()\\\">\\n  GO BACK\\n</button>\\n<br />\\n<button (click)=\\\"goToInstances()\\\">\\n  INSTANCES\\n</button>\\n\\n\\n\";","export default \"<div>\\n  Question input\\n  <form class=\\\"form\\\" [formGroup]=\\\"formGroup\\\">\\n    <mat-form-field>\\n      <input matInput [formControl]=\\\"valueControl\\\" type=\\\"text\\\">\\n    </mat-form-field>\\n  </form>\\n  <app-confirm-buttons\\n    (next)=\\\"onNextQuestion()\\\"\\n    (prev)=\\\"onPrevQuestion()\\\"\\n  ></app-confirm-buttons>\\n</div>\\n\";","import {Component, Input} from '@angular/core';\nimport {InstanceModel} from '@src/app/survey/instance.model';\nimport format from 'date-fns/format';\n\n@Component({\n  selector: 'app-instance',\n  templateUrl: './instance.component.html',\n  styleUrls: ['./instance.component.css']\n})\nexport class InstanceComponent {\n  day = '';\n  month = '';\n  year = '';\n\n  link;\n\n  private _instance;\n  @Input() set instance(value: InstanceModel) {\n    this._instance = value;\n\n    if (value) {\n      const [day, month, year] = format(value.date, 'd MMMM yyyy')\n        .split(' ');\n\n      this.day = day;\n      this.month = month;\n      this.year = year;\n\n      this.link = ['/instance', value._id];\n    }\n  }\n\n  get instance() {\n    return this._instance;\n  }\n\n  constructor() {}\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Observable, of, zip} from 'rxjs';\nimport {SurveyService} from '@src/app/survey/survey.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {map, switchMap, take} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit {\n  answer$: Observable<any>;\n  startValue$: Observable<any>;\n  instanceId$: Observable<string>;\n  questionId$: Observable<string>;\n  question$: Observable<any>;\n  nextQuestionId$;\n  prevQuestionId$;\n  hasNextQuestion$;\n  hasPrevQuestion$;\n\n\n  constructor(\n    private surveyService: SurveyService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    this.instanceId$ = this.route.paramMap.pipe(\n      map(params => params.get('instanceId')),\n    );\n\n    this.questionId$ = this.route.paramMap.pipe(\n      map(params => params.get('questionId')),\n    );\n\n    const instanceIdAndQuestionId$ = zip(this.instanceId$, this.questionId$);\n\n    this.question$ = instanceIdAndQuestionId$.pipe(\n      switchMap(([instanceId, questionId]) => this.surveyService.getQuestion(instanceId, questionId)),\n    );\n\n    this.answer$ = instanceIdAndQuestionId$.pipe(\n      switchMap(([instanceId, questionId]) => this.surveyService.getAnswer(instanceId, questionId)),\n    );\n\n    this.nextQuestionId$ = instanceIdAndQuestionId$.pipe(\n      switchMap(([instanceId, questionId]) => this.surveyService.getNextQuestionId(instanceId, questionId))\n    );\n\n    this.prevQuestionId$ = instanceIdAndQuestionId$.pipe(\n      switchMap(([instanceId, questionId]) => this.surveyService.getPrevQuestionId(instanceId, questionId))\n    );\n\n    this.hasNextQuestion$ = this.nextQuestionId$.pipe(\n      map(id => id !== null)\n    );\n\n    this.hasPrevQuestion$ = this.prevQuestionId$.pipe(\n      map(id => id !== null)\n    );\n  }\n\n  goBack() {\n    this.router.navigate(['home'])\n      .catch();\n  }\n\n  nextQuestion(value) {\n    zip(this.instanceId$, this.questionId$).pipe(\n      take(1),\n      switchMap(([instanceId, questionId]) => this.surveyService.answerQuestion(instanceId, questionId, value)),\n      switchMap(() => this.navigateToQuestion(this.nextQuestionId$))\n    ).subscribe();\n  }\n\n  prevQuestion() {\n    this.navigateToQuestion(this.prevQuestionId$).subscribe();\n  }\n\n  navigateToQuestion(questionId$: Observable<string>) {\n    return zip(this.instanceId$, questionId$, this.hasNextQuestion$).pipe(\n      take(1),\n      switchMap(([instanceId, questionId, hasNextQuestion]) => {\n        if (instanceId === null) {\n          return of();\n        }\n\n        if (!hasNextQuestion) {\n          return this.router.navigate(['/instance']);\n        }\n\n        if (questionId === null) {\n          return of();\n        }\n        return this.router.navigate(['/instance', instanceId, 'question', questionId]);\n      })\n    );\n  }\n}\n","export default \"<div class=\\\"container\\\">\\n  <app-instance\\n    *ngFor=\\\"let instance of instances\\\"\\n    [instance]=\\\"instance\\\"\\n  ></app-instance>\\n</div>\\n\\n\";","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilityService {\n  constructor() {}\n\n  dismissSoftKeyBoard() {\n\n  }\n\n  initNotifications() {\n\n  }\n\n  scheduleSurveyNotifications() {\n\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {max} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-question-input',\n  templateUrl: './question-input.component.html',\n  styleUrls: ['./question-input.component.css', '../question.component.css']\n}) export class QuestionInputComponent {\n  @Output() nextQuestion = new EventEmitter();\n  @Output() prevQuestion = new EventEmitter();\n\n  @Input() label: string;\n  @Input() set textConfigValues(value) {\n    const {\n      type,\n      minLength,\n      maxLength,\n    } = value;\n\n    if (this.type !== type || this.minLength !== minLength || this.maxLength !== maxLength) { // changed values\n      this.initFormValue();\n    }\n\n    this.type = type;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n\n  get textConfigValues() {\n    return {\n      type: this.type,\n      minLength: this.minLength,\n      maxLength: this.maxLength\n    };\n  }\n\n  private _startValue = '';\n  @Input() set startValue(value: string) {\n    if (!value) {\n      return;\n    }\n\n    this._startValue = value;\n    this.initFormValue(this._startValue);\n  }\n\n  type: string;\n  private minLength: number;\n  private maxLength: number;\n\n  formGroup = this.fb.group({\n    value: this.fb.control([['']])\n  });\n\n  get valueControl() {\n    return this.formGroup.get('value');\n  }\n\n  constructor(private fb: FormBuilder) {}\n\n  onNextQuestion () {\n    const formValid = this.validateForm();\n\n    if (!formValid) {\n      return;\n    }\n\n    this.nextQuestion.emit(this.valueControl.value);\n  }\n\n  onPrevQuestion () {\n    this.prevQuestion.emit();\n  }\n\n  validateForm(): boolean {\n    return this.formGroup.valid;\n  }\n\n  initFormValue(startValue= '') {\n    this.formGroup = this.fb.group({\n      value: [startValue, [Validators.required, Validators.minLength(this.minLength), Validators.maxLength(this.maxLength)]]\n    });\n  }\n}\n","export default \"<div>\\n  {{label}}\\n  <form [formGroup]=\\\"fg\\\">\\n    <mat-slider\\n      [min]=\\\"minNumber\\\"\\n      [max]=\\\"maxNumber\\\"\\n      step=\\\"1\\\"\\n      [value]=\\\"sliderControl.value\\\"\\n      (input)=\\\"onValueChange($event.value)\\\"\\n    ></mat-slider>\\n  </form>\\n  <p class=\\\"value-label\\\">\\n    {{sliderControl.value}}: {{selectedOption}}\\n  </p>\\n  <app-confirm-buttons\\n    (next)=\\\"onNextQuestion()\\\"\\n    (prev)=\\\"onPrevQuestion()\\\"\\n  ></app-confirm-buttons>\\n</div>\\n\";","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {AuthService} from '@src/app/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n}) export class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const isValidToken = this.authService.validToken();\n    if (isValidToken) {\n      return true;\n    }\n\n    return this.router.parseUrl('/login');\n  }\n}\n","export default \"<div>\\n  {{label}}\\n  <ul [formGroup]=\\\"formGroup\\\">\\n    <li *ngFor=\\\"let control of checkBoxesControl.controls; let i=index\\\">\\n      <mat-checkbox\\n        [checked]=\\\"control.value\\\"\\n        (change)=\\\"toggleCheckbox($event.checked, control)\\\"\\n      >\\n      </mat-checkbox>\\n      <div class=\\\"checkbox-label\\\">\\n        {{getOptionLabelFromIndex(i)}}\\n      </div>\\n    </li>\\n  </ul>\\n  <app-confirm-buttons\\n    (next)=\\\"onNextQuestion()\\\"\\n    (prev)=\\\"onPrevQuestion()\\\"\\n  ></app-confirm-buttons>\\n</div>\\n\";","export default \"\";","export class QuestionInputModel {\n  type: string;\n  label: string;\n  minLength: number;\n  maxLength: number;\n\n  constructor(value: {type, label, minLength, maxLength}) {\n    const {type, label, minLength, maxLength} = value;\n    this.type = type;\n    this.label = label;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n","import { Routes } from '@angular/router';\n\nimport { HomeComponent } from '@src/app/home/home.component';\nimport {QuestionComponent} from '@src/app/survey/question/question.component';\nimport {InstancesComponent} from '@src/app/survey/instances/instances.component';\nimport {LoginComponent} from '@src/app/auth/login/login.component';\nimport {AuthGuard} from '@src/app/auth/auth.guard';\nimport {QuestionContainerComponent} from '@src/app/survey/question-container/question-container.component';\nimport {TodayInstanceComponent} from '@src/app/survey/instances/today-instance/today-instance.component';\nimport {LoginGuard} from '@src/app/auth/login/login.guard';\n\nexport const routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent,\n    canActivate: [LoginGuard]\n  },\n  {\n    path: '',\n    canActivate: [AuthGuard],\n    children: [\n      {\n          path: '',\n          redirectTo: '/instance',\n          pathMatch: 'full',\n      },\n      {\n        path: 'home',\n        component: HomeComponent,\n      },\n      {\n        path: 'instance',\n        component: TodayInstanceComponent,\n        // component: InstancesComponent,\n        canActivate: [AuthGuard]\n      },\n      {\n        path: 'instance/:instanceId',\n        component: QuestionContainerComponent,\n        canActivate: [AuthGuard]\n      },\n      {\n        path: 'instance/:instanceId/question/:questionId',\n        component: QuestionComponent,\n        canActivate: [AuthGuard]\n      }\n    ]\n  }\n];\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJob21lLmNvbXBvbmVudC5jc3MifQ== */\";","export default \"<div class=\\\"root\\\">\\n  <div class=\\\"card question-container\\\">\\n    <app-question-dummy\\n      [question]=\\\"question$ | async\\\"\\n      [hasNextQuestion]=\\\"hasNextQuestion$ | async\\\"\\n      [hasPrevQuestion]=\\\"hasPrevQuestion$ | async\\\"\\n      [answer]=\\\"answer$ | async\\\"\\n      (nextQuestion)=\\\"nextQuestion($event)\\\"\\n      (prevQuestion)=\\\"prevQuestion()\\\"\\n    ></app-question-dummy>\\n  </div>\\n</div>\\n\";","import {Component, OnInit} from '@angular/core';\nimport { LocalNotifications } from '@nativescript/local-notifications';\nimport {UtilityService} from '@src/app/utility/utility.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  constructor(\n      private utilityService: UtilityService\n  ) {\n    this.utilityService.initNotifications();\n  }\n\n  ngOnInit() {\n    this.utilityService.scheduleSurveyNotifications();\n  }\n}\n","export default \"<div class=\\\"mat-typography\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\";","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {FormBuilder, FormControl} from '@angular/forms';\nimport {findNativeScriptPlatformPathInSource} from '@nativescript/webpack/utils/ast-utils';\n\n@Component({\n  selector: 'app-question-choice-slider',\n  templateUrl: './question-choice-slider.component.html',\n  styleUrls: ['question-choice-slider.component.css']\n})\nexport class QuestionChoiceSliderComponent {\n  @Output() nextQuestion = new EventEmitter();\n  @Output() prevQuestion = new EventEmitter();\n\n  @Input() label: string;\n\n  private _options;\n  @Input() set options(value: {label: string}[]) {\n    this._options = value;\n    // side effect, reset slider value\n    this.sliderControl.setValue(1);\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  private _startValue = [];\n  @Input() set startValue(value: number[]) {\n    this._startValue = value;\n\n    if (!value) {\n      return;\n    }\n\n    this.precompilateForm();\n  }\n\n  fg = this.fb.group({\n    slider: this.fb.control(1)\n  });\n\n  get sliderControl() {\n    return this.fg.get('slider') as FormControl;\n  }\n\n  get selectedOption() {\n    return this.options[this.sliderControl.value - 1]?.label;\n  }\n\n  minNumber = 1;\n  get maxNumber() {\n    return this.options?.length ?? this.minNumber;\n  }\n\n  constructor(private fb: FormBuilder) {}\n\n  onValueChange(value) {\n    this.sliderControl.setValue(value);\n  }\n\n  onNextQuestion () {\n    const output = this.formatOutput();\n    this.nextQuestion.emit(output);\n  }\n\n  onPrevQuestion () {\n    this.prevQuestion.emit();\n  }\n\n  formatOutput() {\n    const value = this.sliderControl.value;\n    return [value - 1];\n  }\n\n  precompilateForm() {\n    const [value] = this._startValue;\n    this.sliderControl.setValue(value + 1);\n  }\n}\n","export default \"<a class=\\\"instance card\\\" [routerLink]=\\\"link\\\">\\n  <p>\\n    <span class=\\\"day\\\">{{day}}</span>\\n    <span class=\\\"month\\\">{{month}}</span>\\n  </p>\\n  <p>\\n    <span class=\\\"year\\\">{{year}}</span>\\n  </p>\\n</a>\\n\";","import parse from 'date-fns/parse';\n\nexport class InstanceModel {\n  _id: string;\n  surveyId: string;\n  date: Date;\n\n  constructor({_id, surveyId, date}) {\n    this._id = _id;\n    this.surveyId = surveyId;\n    this.date = parse(date, 'dd-MM-yyyy', new Date());\n  }\n}\n","import {Component, EventEmitter, Output} from '@angular/core';\nimport {QuestionService} from '@src/app/survey/question/question.service';\n\n@Component({\n  selector: 'app-confirm-buttons',\n  templateUrl: './confirm-buttons.component.html',\n  styleUrls: ['./confirm-buttons.component.css']\n})\nexport class ConfirmButtonsComponent {\n  @Output() next = new EventEmitter();\n  @Output() prev = new EventEmitter();\n\n  get hasNextQuestion(): boolean {\n    return this.questionService.hasNextQuestion;\n  }\n\n  get hasPrevQuestion(): boolean {\n    return this.questionService.hasPrevQuestion;\n  }\n\n  constructor(\n    private questionService: QuestionService,\n  ) {}\n\n  onNext() {\n    this.next.emit();\n  }\n\n  onPrev() {\n    this.prev.emit();\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {SurveyService} from '@src/app/survey/survey.service';\nimport {Observable} from 'rxjs';\nimport {InstanceModel} from '@src/app/survey/instance.model';\n\n@Component({\n  selector: 'app-instances',\n  templateUrl: './instances.component.html',\n  styleUrls: ['./instances.component.css']\n})\nexport class InstancesComponent implements OnInit {\n  instances$: Observable<InstanceModel[]>;\n\n  constructor(private surveyService: SurveyService) {}\n\n  ngOnInit() {\n    this.instances$ = this.surveyService.getInstances();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from '@src/app/app-routing.module';\nimport { AppComponent } from '@src/app/app.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport {declarations} from '@src/app/global/module/declarations';\nimport {providers} from '@src/app/global/module/providers';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MaterialModule} from '@src/app/material/material.module';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatSliderModule} from '@angular/material/slider';\n\n\n@NgModule({\n  declarations: declarations,\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    MatSliderModule,\n  ],\n  providers: providers,\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {AuthInterceptor} from '@src/app/auth/auth.interceptor';\nimport {GlobalInterceptor} from '@src/app/global/global.interceptor';\n\nexport const providers = [\n    {\n        provide: HTTP_INTERCEPTORS,\n        useClass: AuthInterceptor,\n        multi: true,\n    },\n    {\n        provide: HTTP_INTERCEPTORS,\n        useClass: GlobalInterceptor,\n        multi: true,\n    }\n];\n","export default \"<div class=\\\"root\\\">\\n  <button\\n    mat-raised-button\\n    color=\\\"primary\\\"\\n    (click)=\\\"onPrev()\\\"\\n    [disabled]=\\\"!hasPrevQuestion\\\"\\n  >PREV</button>\\n  <button\\n    mat-raised-button\\n    color=\\\"primary\\\"\\n    (click)=\\\"onNext()\\\"\\n  >\\n    {{hasNextQuestion ? 'NEXT' : 'CONFIRM'}}\\n  </button>\\n</div>\\n\";","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '@src/app/auth/auth.service';\nimport {AbstractControl, FormBuilder, Validators} from '@angular/forms';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {Router} from '@angular/router';\nimport {of} from 'rxjs';\nimport {UtilityService} from '@src/app/utility/utility.service';\nimport {IconService} from '@src/app/utility/icon.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form = this.fb.group({\n    username: this.fb.control('', [Validators.required]),\n    password: this.fb.control('', [Validators.required])\n  });\n\n  get username() {\n    return this.form.get('username');\n  }\n\n  get password()  {\n    return this.form.get('password');\n  }\n\n  wrongLogin = false;\n  loading = false;\n\n  _passwordVisible;\n  set passwordVisible(value: boolean) {\n    this._passwordVisible = value;\n    this.iconPassword = value ? this.iconEye : this.iconEyeSlash;\n  }\n\n  get passwordVisible() {\n    return this._passwordVisible;\n  }\n\n  iconEye;\n  iconEyeSlash;\n  iconPassword;\n\n  constructor(\n    private authService: AuthService,\n    private fb: FormBuilder,\n    private router: Router,\n    private utilityService: UtilityService,\n    public iconService: IconService,\n  ) {}\n\n  ngOnInit() {\n    this.iconEye = this.iconService.eye;\n    this.iconEyeSlash = this.iconService.eyeSlash;\n    this.passwordVisible = false;\n  }\n\n  submit() {\n    this.wrongLogin = false;\n    this.utilityService.dismissSoftKeyBoard();\n\n    if (this.form.invalid) {\n      this.username.markAsDirty();\n      this.password.markAsDirty();\n      return;\n    }\n\n    this.loading = true;\n\n    this.authService.login(this.username.value, this.password.value).pipe(\n      mergeMap(() => this.router.navigate(['/instance'])),\n      catchError(err => {\n        this.wrongLogin = true;\n        this.loading = false;\n        return of(err);\n      }),\n    ).subscribe();\n  }\n\n  errorVisible(control: AbstractControl) {\n    return control.invalid && !control.pristine;\n  }\n\n  clearForm() {\n    this.wrongLogin = false;\n    this.form.reset();\n    this.utilityService.dismissSoftKeyBoard();\n  }\n\n  togglePasswordVisibility() {\n    this.passwordVisible = !this.passwordVisible;\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n\n  saveToken(token) {\n    localStorage.setItem('auth-token', token);\n  }\n\n  readToken() {\n    return localStorage.getItem('auth-token');\n  }\n\n  decodeToken(token) {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {AbstractControl, FormArray, FormBuilder} from '@angular/forms';\n\n@Component({\n  selector: 'app-question-array',\n  templateUrl: './question-array.component.html',\n  styleUrls: ['./question-array.component.css', '../question.component.css']\n})\nexport class QuestionArrayComponent {\n  @Output() nextQuestion = new EventEmitter();\n  @Output() prevQuestion = new EventEmitter();\n\n  @Input() label: string;\n  @Input() minNumberOfChoices: number;\n\n  @Input() set maxNumberOfChoices(value: number) {\n\n    this._maxNumberOfChoices = value;\n    this.singleChoice = value === 1;\n  }\n\n  @Input() hasOtherOption: boolean;\n\n  private _startValue = [[]];\n  @Input() set startValue(value: number[][]) {\n    if (!value) {\n      return;\n    }\n\n    this._startValue = value;\n    this.precompilateForm();\n  }\n\n  @Input() set optionsAndSubQuestions(value: {options: {label: string}[], subQuestions: {label: string}[]}) {\n    this._optionsAndSubQuestions = value;\n\n    const {options, subQuestions} = value;\n\n    if (!options || !subQuestions) {\n      return;\n    }\n\n    // matrix of false [[false, false], [false, false]]\n    const initValues = [];\n    for (let i = 0; i < subQuestions.length; i++) {\n      const initRow = [];\n      for (let j = 0; j < options.length; j++) {\n        initRow[j] = false;\n      }\n      initValues[i] = initRow;\n    }\n\n    this.initFormGroup(initValues);\n\n    // while (this.checkBoxesControl.controls.length < subQuestions.length) {\n    //   const subQuestionControl = this.fb.array([]);\n    //   while (subQuestionControl.controls.length < options.length) {\n    //     subQuestionControl.push(\n    //       this.fb.control(false)\n    //     );\n    //   }\n    //   this.checkBoxesControl.push(subQuestionControl);\n    // }\n\n    // this._options = valud;\n    //\n    // while (this.checkBoxesControl.controls.length < value.length) {\n    //   this.checkBoxesControl.push(\n    //     this.fb.control(false)\n    //   );\n    // }\n  }\n\n  get checkBoxesControl() {\n    return this.formGroup.get('checkBoxesControl') as FormArray;\n  }\n\n  formGroup = this.fb.group({\n    checkBoxesControl: this.fb.array([])\n  });\n\n\n  get maxNumberOfChoices(): number {\n    return this._maxNumberOfChoices;\n  }\n\n  get optionsAndSubQuestions() {\n    return this._optionsAndSubQuestions;\n  }\n\n  private _optionsAndSubQuestions;\n  private _maxNumberOfChoices: number;\n  singleChoice: boolean;\n\n  get options() {\n    return this.optionsAndSubQuestions.options;\n  }\n\n  get subQuestions() {\n    return this.optionsAndSubQuestions.subQuestions;\n  }\n\n  constructor(private fb: FormBuilder) {}\n\n  submit() {\n    const values = this.checkBoxesControl.controls.map(\n      (subQuestion: FormArray) => subQuestion.controls.map(c => c.value)\n    );\n\n  }\n\n  toggleCheckbox(value: boolean, control: AbstractControl, subQuestion: AbstractControl) {\n    if (!this.singleChoice) { // multiple choice\n      control.setValue(value);\n      return;\n    }\n\n    if (!value) {\n      return;\n    }\n\n    const controls = this.getControlsFromSubQuestion(subQuestion);\n\n    controls.map(c => {\n        c.setValue(false);\n    });\n\n    control.setValue(value);\n  }\n\n  getControlsFromSubQuestion(subQuestion: AbstractControl) {\n    return (subQuestion as FormArray).controls;\n  }\n\n  onNextQuestion () {\n    const validForm = this.validateForm();\n\n    // if (!validForm) {\n    //   return;\n    // }\n\n    const output = this.formatOutput();\n\n    this.nextQuestion.emit(output);\n  }\n\n  onPrevQuestion () {\n    this.prevQuestion.emit();\n  }\n\n  getSubQuestion(index: number) {\n    return this.optionsAndSubQuestions.subQuestions[index].label;\n  }\n\n  validateForm(): boolean {\n    return this.checkBoxesControl.controls\n      .map((c: FormArray) => this.countTrueValues(c)) // count number of true values for each subquestion\n      .map(v => v >= this.minNumberOfChoices && v <= this.maxNumberOfChoices) // check if each subquestion has valid number of answers\n      .reduce((prevValid, currValid) => {\n        // if prev not valid return false\n        if (!prevValid) {\n          return false;\n        }\n        return currValid;\n      }, true);\n  }\n\n  countTrueValues(subQuestion: FormArray): number {\n    return subQuestion.value.reduce((acc, value) => value ? acc + 1 : acc, 0);\n  }\n\n  formatOutput() {\n    return this.checkBoxesControl.value\n      .map((subQuestion: boolean[]) => {\n        return subQuestion.reduce((acc, val, index) => {\n          if (val) {\n            return [\n              ...acc,\n              index,\n            ];\n          }\n          return acc;\n        }, []);\n      });\n  }\n\n  initFormGroup(value: boolean[][]) {\n    // matrix of form array\n    this.formGroup = this.fb.group({\n      checkBoxesControl: this.fb.array(\n        value.map(row => this.fb.array(row))\n      )\n    });\n\n    // while (this.checkBoxesControl.controls.length < subQuestions.length) {\n    //   const subQuestionControl = this.fb.array([]);\n    //   while (subQuestionControl.controls.length < options.length) {\n    //     subQuestionControl.push(\n    //       this.fb.control(false)\n    //     );\n    //   }\n    //   this.checkBoxesControl.push(subQuestionControl);\n    // }\n  }\n\n  precompilateForm() {\n    // from [[2, 4], [1, 3]] to [[false, true, false, true], [true, false, true, false]]\n    const nextValue: boolean[][] = this.checkBoxesControl.value;\n    this._startValue.forEach((row: number[], rowIndex) => row.forEach(truePos => nextValue[rowIndex][truePos] = true));\n\n    this.initFormGroup(nextValue);\n  }\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {MatButtonModule} from '@angular/material/button';\nimport {NgModule} from '@angular/core';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatIconModule} from '@angular/material/icon';\n\nconst MaterialComponents = [\n  BrowserModule,\n  MatIconModule,\n  MatButtonModule,\n  MatCheckboxModule,\n  MatTableModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatProgressBarModule,\n];\n\n@NgModule({\n  imports: [MaterialComponents],\n  exports: [MaterialComponents]\n})\nexport class MaterialModule {}\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class GlobalInterceptor implements HttpInterceptor {\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        let request = req;\n\n        // if request has a body (POST, PUT, PATCH) add\n        switch (req.method) {\n            case 'POST':\n            case 'PUT':\n            case 'PATCH':\n                request = req.clone({\n                    headers: request.headers.set('Content-Type', 'application/json')\n                });\n        }\n        return next.handle(request);\n    }\n}\n","import {Component, Input} from '@angular/core';\nimport {InstanceModel} from '@src/app/survey/instance.model';\n\n@Component({\n  selector: 'app-instances-dummy',\n  templateUrl: './instances-dummy.component.html',\n  styleUrls: ['./instances-dummy.component.css']\n})\nexport class InstancesDummyComponent {\n  @Input() instances: InstanceModel[];\n\n  constructor() {}\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJxdWVzdGlvbi1kdW1teS5jb21wb25lbnQuY3NzIn0= */\";","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AbstractControl, FormArray, FormBuilder} from '@angular/forms';\n\n@Component({\n  selector: 'app-question-choice',\n  templateUrl: './question-choice.component.html',\n  styleUrls: ['./question-choice.component.css', '../question.component.css']\n})\nexport class QuestionChoiceComponent implements OnInit {\n  @Output() nextQuestion = new EventEmitter();\n  @Output() prevQuestion = new EventEmitter();\n\n  @Input() label: string;\n  @Input() minNumberOfChoices: number;\n  @Input() hasOtherOption: boolean;\n\n  private _maxNumberOfChoices;\n  @Input() set maxNumberOfChoices(value: number) {\n\n    this._maxNumberOfChoices = value;\n    this.singleChoice = value === 1;\n  }\n\n  get maxNumberOfChoices() {\n    return this._maxNumberOfChoices;\n  }\n\n  private _startValue = [];\n  @Input() set startValue(value: number[]) {\n    this._startValue = value;\n\n    if (!value) {\n      return;\n    }\n    this.precompilateForm();\n  }\n\n  private _options;\n  @Input() set options(value: {label: string}[]) {\n    this._options = value;\n\n    // const initValues = [];\n    // for (let i = 0; i < subQuestions.length; i++) {\n    //   const initRow = [];\n    //   for (let j = 0; j < options.length; j++) {\n    //     initRow[j] = false;\n    //   }\n    //   initValues[i] = initRow;\n    // }\n\n    const initValue = [];\n    for (let i = 0; i < this._options.length; i++) {\n      initValue[i] = false;\n    }\n\n    this.initFormGroup(initValue);\n\n    // while (this.checkBoxesControl.controls.length < value.length) {\n    //   this.checkBoxesControl.push(\n    //     this.fb.control(false)\n    //   );\n    // }\n    // this.checkBoxesControl.\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get checkBoxesControl() {\n    return this.formGroup.get('checkBoxesControl') as FormArray;\n  }\n\n  formGroup = this.fb.group({\n    checkBoxesControl: this.fb.array([])\n  });\n\n  disableCheckBoxes = false;\n\n  private _numberOfTrueValues = 0;\n  set numberOfTrueValues(value) {\n    this._numberOfTrueValues = value;\n    this.disableCheckBoxes = value >= this.maxNumberOfChoices;\n  }\n\n  get numberOfTrueValues() {\n    return this._numberOfTrueValues;\n  }\n\n  errorMessage = '';\n  singleChoice = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.numberOfTrueValues = this.countTrueValues();\n    // this.initFormGroup();\n  }\n\n  validateForm(): boolean {\n    const numberOfTrueValues = this.countTrueValues();\n    this.errorMessage = '';\n\n    if (numberOfTrueValues < this.minNumberOfChoices) {\n      this.errorMessage =  `Insert at least ${this.minNumberOfChoices} options`;\n      return false;\n    }\n\n    if (numberOfTrueValues > this.maxNumberOfChoices) {\n      this.errorMessage = `Insert at most ${this.maxNumberOfChoices} options`;\n      return false;\n    }\n\n    return true;\n  }\n\n  toggleCheckbox(value: boolean, control: AbstractControl) {\n    if (!this.singleChoice) {\n      control.setValue(value);\n      this.numberOfTrueValues = this.countTrueValues();\n    }\n\n    if (!value) {\n      return;\n    }\n\n    const controls = this.checkBoxesControl.controls;\n\n    controls.map(c => {\n      c.setValue(false);\n    });\n\n    control.setValue(value);\n  }\n\n  onNextQuestion () {\n    const validForm = this.validateForm();\n\n    if (!validForm) {\n      return;\n    }\n\n    const output = this.formatOutput();\n    this.nextQuestion.emit(output);\n  }\n\n  onPrevQuestion () {\n    this.prevQuestion.emit();\n  }\n\n  getOptionLabelFromIndex(index: number): string {\n    return this.options[index].label;\n  }\n\n  countTrueValues() {\n    return this.checkBoxesControl.controls.reduce((acc:  number, control) => {\n      if (control.value) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n  }\n\n  formatOutput() {\n    return this.checkBoxesControl.controls.reduce((acc: number[], control, index) => {\n      if (control.value) {\n        return [...acc, index];\n      }\n      return acc;\n    }, []);\n  }\n\n  initFormGroup(value = []) {\n    this.formGroup = this.fb.group({\n      checkBoxesControl: this.fb.array(value)\n    });\n  }\n\n  precompilateForm() {\n    // from [2, 4, 5] to [false, true, false, true, true]\n    const nextValue = this.checkBoxesControl.controls.map(() => false);\n    this._startValue.forEach(pos => nextValue[pos] = true);\n\n    this.initFormGroup(nextValue);\n  }\n}\n","export class QuestionArrayModel {\n  label;\n  minNumberOfChoices: number;\n  maxNumberOfChoices: number;\n  subQuestion: {label: string}[];\n  options: {label: string}[];\n\n  constructor({label, minNumberOfChoices, maxNumberOfChoices, subQuestions, options}) {\n    this.label = label;\n    this.minNumberOfChoices = minNumberOfChoices;\n    this.maxNumberOfChoices = maxNumberOfChoices;\n    this.subQuestion = subQuestions;\n    this.options = options;\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IconService {\n\n  get eye() {\n    return {\n      className: 'far',\n      code: this.formatCode(0xf06e)\n    };\n  }\n\n  get eyeSlash() {\n    return {\n      className: 'far',\n      code: this.formatCode(0xf070)\n    };\n  }\n\n  constructor() {}\n\n  formatCode(code: number) {\n    return String.fromCharCode(code);\n  }\n}\n","export default \"<div class=\\\"root\\\">\\n  <div class=\\\"card\\\">\\n    <h2>Vuoi rispondere al questionario giornaliero?</h2>\\n    <button\\n      mat-raised-button\\n      color=\\\"primary\\\"\\n      [disabled]=\\\"!instanceId\\\"\\n      (click)=\\\"navigateToQuestion()\\\"\\n    >Rispondi</button>\\n  </div>\\n</div>\\n\";","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {tap} from 'rxjs/operators';\nimport {TokenStorageService} from '@src/app/auth/token-storage.service';\nimport isAfter from 'date-fns/isAfter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  prefix = 'api/auth';\n\n  constructor(\n    private http: HttpClient,\n    private tokenStorageService: TokenStorageService\n) { }\n\n  login(userId, password) {\n    return this.http.post(\n      `${this.prefix}/login`,\n      {userId, password}\n    ).pipe(\n      tap((res: any) => this.tokenStorageService.saveToken(res.token)),\n      // tap((res: any) => console.log(this.decodeToken(res.token)))\n    );\n  }\n\n  get() {\n    this.http.get(\n      `${this.prefix}/get`\n    ).subscribe(() => console.log('success'), error => console.log('fail', error));\n  }\n\n  readToken() {\n    return this.tokenStorageService.readToken();\n  }\n\n  validToken() {\n    const tokenJSON = this.tokenStorageService.readToken();\n    if (!tokenJSON) {\n      return false;\n    }\n\n    const token = this.tokenStorageService.decodeToken(tokenJSON);\n    const expireDate = new Date(token.exp * 1000);\n    const now = new Date();\n    return isAfter(expireDate, now);\n  }\n}\n","export default \"<app-question-choice\\n  *ngIf=\\\"isTypeChoice && !questionData.slider\\\"\\n  [label]=\\\"questionLabel\\\"\\n  [minNumberOfChoices]=\\\"questionData.minNumberOfChoices\\\"\\n  [maxNumberOfChoices]=\\\"questionData.maxNumberOfChoices\\\"\\n  [hasOtherOption]=\\\"questionData.hasOtherOption\\\"\\n  [options]=\\\"questionData.options\\\"\\n  [startValue]=\\\"startValue\\\"\\n  (nextQuestion)=\\\"onNextQuestion($event)\\\"\\n  (prevQuestion)=\\\"onPrevQuestion()\\\"\\n>\\n</app-question-choice>\\n<app-question-choice-slider\\n  *ngIf=\\\"isTypeChoice && questionData.slider\\\"\\n  [label]=\\\"questionLabel\\\"\\n  [options]=\\\"questionData.options\\\"\\n  [startValue]=\\\"startValue\\\"\\n  (nextQuestion)=\\\"onNextQuestion($event)\\\"\\n  (prevQuestion)=\\\"onPrevQuestion()\\\"\\n>\\n</app-question-choice-slider>\\n<app-question-array\\n  *ngIf=\\\"isTypeArray\\\"\\n  [label]=\\\"questionLabel\\\"\\n  [minNumberOfChoices]=\\\"questionData.minNumberOfChoices\\\"\\n  [maxNumberOfChoices]=\\\"questionData.maxNumberOfChoices\\\"\\n  [optionsAndSubQuestions]=\\\"{subQuestions: questionData.subQuestion, options: questionData.options}\\\"\\n  [startValue]=\\\"startValue\\\"\\n  (nextQuestion)=\\\"onNextQuestion($event)\\\"\\n  (prevQuestion)=\\\"onPrevQuestion()\\\"\\n></app-question-array>\\n<app-question-input\\n  *ngIf=\\\"isTypeInput\\\"\\n  [label]=\\\"questionData.label\\\"\\n  [textConfigValues]=\\\"{\\n              type: questionData.type,\\n              minLength: questionData.minLength,\\n              maxLength: questionData.maxLength\\n            }\\\"\\n  [startValue]=\\\"startValue\\\"\\n  (nextQuestion)=\\\"onNextQuestion($event)\\\"\\n  (prevQuestion)=\\\"onPrevQuestion()\\\"\\n></app-question-input>\\n\";","export default \".instance {\\n  padding: 25px 25px 20px;\\n  text-decoration: none;\\n  display: block;\\n  color: #000;\\n}\\n\\np {\\n  margin: 0;\\n  display: flex;\\n  justify-content: flex-end;\\n}\\n\\n.day {\\n  font-size: 30px;\\n  margin-right: 20px;\\n}\\n\\n.month {\\n  font-size: 28px;\\n}\\n\\n.year {\\n  font-size: 18px;\\n  margin-top: 20px\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbmNlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx1QkFBdUI7RUFDdkIscUJBQXFCO0VBQ3JCLGNBQWM7RUFDZCxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxTQUFTO0VBQ1QsYUFBYTtFQUNiLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZUFBZTtFQUNmO0FBQ0YiLCJmaWxlIjoiaW5zdGFuY2UuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbnN0YW5jZSB7XG4gIHBhZGRpbmc6IDI1cHggMjVweCAyMHB4O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBjb2xvcjogIzAwMDtcbn1cblxucCB7XG4gIG1hcmdpbjogMDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbn1cblxuLmRheSB7XG4gIGZvbnQtc2l6ZTogMzBweDtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xufVxuXG4ubW9udGgge1xuICBmb250LXNpemU6IDI4cHg7XG59XG5cbi55ZWFyIHtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBtYXJnaW4tdG9wOiAyMHB4XG59XG4iXX0= */\";","export default \"<app-instances-dummy\\n  [instances]=\\\"instances$ | async\\\"\\n></app-instances-dummy>\\n\";","export default \".root {\\n  background-color: #f8f8f8;\\n  height: 100vh;\\n  width: 100vw;\\n\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.card {\\n  min-width: 300px;\\n  padding: 30px 40px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvZGF5LWluc3RhbmNlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx5QkFBeUI7RUFDekIsYUFBYTtFQUNiLFlBQVk7O0VBRVosYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6InRvZGF5LWluc3RhbmNlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucm9vdCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY4Zjg7XG4gIGhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDB2dztcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmNhcmQge1xuICBtaW4td2lkdGg6IDMwMHB4O1xuICBwYWRkaW5nOiAzMHB4IDQwcHg7XG59XG4iXX0= */\";","export class QuestionChoiceModel {\n  label: string;\n  minNumberOfChoices: number;\n  maxNumberOfChoices: number;\n  hasOtherOption: boolean;\n  options: {label: string}[];\n  slider: boolean;\n\n  constructor(data: {\n    label: string,\n    minNumberOfChoices: number;\n    maxNumberOfChoices: number;\n    hasOtherOption: boolean;\n    slider: boolean;\n    options: {label: string}[];\n  }) {\n    this.label = data.label;\n    this.minNumberOfChoices = data.minNumberOfChoices;\n    this.maxNumberOfChoices = data.maxNumberOfChoices;\n    this.hasOtherOption = data.hasOtherOption;\n    this.options = data.options;\n    this.slider = !!data.slider;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {AuthService} from '@src/app/auth/auth.service';\n\n@Injectable({\n    providedIn: 'root'\n}) export class LoginGuard implements CanActivate {\n    constructor(\n        private authService: AuthService,\n        private router: Router\n    ) {}\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        const isValidToken = this.authService.validToken();\n        if (!isValidToken) {\n            return true;\n        }\n\n        return this.router.parseUrl('/');\n    }\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {SurveyService} from '@src/app/survey/survey.service';\nimport {Subscription} from 'rxjs';\nimport {Router} from '@angular/router';\nimport { tap} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-today-instance',\n  templateUrl: './today-instance.component.html',\n  styleUrls: ['./today-instance.component.css']\n}) export class TodayInstanceComponent implements OnInit, OnDestroy {\n  todayInstanceSubscription: Subscription;\n  instanceId;\n\n  constructor(private surveyService: SurveyService, private router: Router) {}\n\n  ngOnInit() {\n    this.todayInstanceSubscription = this.surveyService.getTodayInstance().pipe(\n      tap(instance => this.instanceId = instance._id),\n      // switchMap(instance => this.router.navigate(['instance', instance._id]))\n    ).subscribe();\n  }\n\n  ngOnDestroy() {\n    this.todayInstanceSubscription?.unsubscribe();\n  }\n\n  navigateToQuestion() {\n    if (!this.instanceId) {\n      return;\n    }\n    this.router.navigate(['instance', this.instanceId]).catch();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { routes } from '@src/app/app.routes';\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \".container {\\n  height: 100vh;\\n  width: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.card {\\n  width: 500px;\\n  padding: 40px 50px 0;\\n}\\n\\nform {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.form-field {\\n  margin-bottom: 10px;\\n}\\n\\n.buttons {\\n  width: 100%;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n.buttons button {\\n  width: 45%;\\n}\\n\\n.wrong-login-message {\\n  margin-top: 5px;\\n  margin-bottom: 5px;\\n}\\n\\n.wrong-login-message,\\nmat-progress-bar {\\n  opacity: 0;\\n  transition: opacity 300ms;\\n}\\n\\n.visible {\\n  opacity: 1;\\n}\\n\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsV0FBVztFQUNYLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsYUFBYTtFQUNiLDhCQUE4QjtBQUNoQzs7QUFFQTtFQUNFLFVBQVU7QUFDWjs7QUFFQTtFQUNFLGVBQWU7RUFDZixrQkFBa0I7QUFDcEI7O0FBRUE7O0VBRUUsVUFBVTtFQUNWLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLFVBQVU7QUFDWiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XG4gIGhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmNhcmQge1xuICB3aWR0aDogNTAwcHg7XG4gIHBhZGRpbmc6IDQwcHggNTBweCAwO1xufVxuXG5mb3JtIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLmZvcm0tZmllbGQge1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xufVxuXG4uYnV0dG9ucyB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG5cbi5idXR0b25zIGJ1dHRvbiB7XG4gIHdpZHRoOiA0NSU7XG59XG5cbi53cm9uZy1sb2dpbi1tZXNzYWdlIHtcbiAgbWFyZ2luLXRvcDogNXB4O1xuICBtYXJnaW4tYm90dG9tOiA1cHg7XG59XG5cbi53cm9uZy1sb2dpbi1tZXNzYWdlLFxubWF0LXByb2dyZXNzLWJhciB7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMzAwbXM7XG59XG5cbi52aXNpYmxlIHtcbiAgb3BhY2l0eTogMTtcbn1cblxuIl19 */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJxdWVzdGlvbi1pbnB1dC5jb21wb25lbnQuY3NzIn0= */\";","export default \"table {\\n  margin-top: 24px;\\n  margin-bottom: 50px;\\n  border-spacing: 0;\\n}\\n\\nth, td {\\n  padding: 20px 10px;\\n}\\n\\nth {\\n  color: #777;\\n  font-weight: normal;\\n}\\n\\ntd {\\n  border-top: 1px solid #ccc;\\n}\\n\\n.checkbox-container {\\n  display: flex;\\n  justify-content: center;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXN0aW9uLWFycmF5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSwwQkFBMEI7QUFDNUI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0FBQ3pCIiwiZmlsZSI6InF1ZXN0aW9uLWFycmF5LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XG4gIG1hcmdpbi10b3A6IDI0cHg7XG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG50aCwgdGQge1xuICBwYWRkaW5nOiAyMHB4IDEwcHg7XG59XG5cbnRoIHtcbiAgY29sb3I6ICM3Nzc7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG59XG5cbnRkIHtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7XG59XG5cbi5jaGVja2JveC1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cbiJdfQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbnN0YW5jZXMuY29tcG9uZW50LmNzcyJ9 */\";","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from '@src/app/app.module';\nimport { environment } from '@src/environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"card\\\">\\n    <form [formGroup]=\\\"form\\\">\\n      <!-- username -->\\n      <mat-form-field class=\\\"form-field\\\" appearance=\\\"outline\\\">\\n        <mat-label>Username</mat-label>\\n        <input formControlName=\\\"username\\\" matInput placeholder=\\\"Insert username\\\">\\n        <mat-error>Insert a username</mat-error>\\n      </mat-form-field>\\n\\n      <!-- password -->\\n      <mat-form-field class=\\\"form-field\\\" appearance=\\\"outline\\\">\\n        <mat-label>Password</mat-label>\\n        <input [type]=\\\"passwordVisible ? 'text' : 'password'\\\" formControlName=\\\"password\\\" matInput placeholder=\\\"Insert password\\\">\\n        <mat-error>Insert a password</mat-error>\\n        <button matSuffix mat-icon-button (click)=\\\"togglePasswordVisibility()\\\">\\n          <mat-icon *ngIf=\\\"passwordVisible\\\">visibility</mat-icon>\\n          <mat-icon *ngIf=\\\"!passwordVisible\\\">visibility_off</mat-icon>\\n        </button>\\n      </mat-form-field>\\n\\n      <!-- buttons -->\\n      <div class=\\\"buttons\\\">\\n        <button (click)=\\\"submit()\\\" mat-button color=\\\"primary\\\" [disabled]=\\\"loading\\\">LOGIN</button>\\n        <button (click)=\\\"clearForm()\\\" mat-button [disabled]=\\\"loading\\\">CANCEL</button>\\n      </div>\\n    </form>\\n    <span\\n      [ngClass]=\\\"{'mat-error': true, 'wrong-login-message': true, 'visible': wrongLogin}\\\"\\n    >\\n      Wrong Username or Password\\n    </span>\\n    <mat-progress-bar [ngClass]=\\\"{'visible': loading}\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\n  </div>\\n</div>\\n\";"]}